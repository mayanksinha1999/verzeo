# -*- coding: utf-8 -*-
"""Verzeo_Major_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CJp7UGE1go6lcuoRnTS9Qe3l1-Jc1yWQ
"""

!pip install tensorflow
import tensorflow as tf
import keras

from keras.datasets import cifar10
from keras.utils import np_utils
from keras.models import Sequential
from keras.layers.core import Dense,Dropout,Activation,Flatten
from keras.layers.convolutional import Conv2D,MaxPooling2D
from keras.optimizers import SGD,Adam,RMSprop
import matplotlib.pyplot as plt

#CIFAR_10 IS A SET OF 60K IMAGES 32*32 PIXELS ON 3 CHANNELS
IMG_CHANNELS=3
IMG_ROWS=32
IMG_COLS=32

#CONSTANT
BATCH_SIZE=128
NB_EPOCH=20
NB_CLASSES=10
VERBOSE=1
VALIDATION_SPLIT=0.2
OPTIM=RMSprop()

#load dataset
(X_train,Y_train),(X_test,y_test)=cifar10.load_data()
print('X_train shape:',X_train.shape)
print(X_train.shape[0],'train  samples')
print(X_test.shape[0],'test samples')

#convert to categorical
Y_train = np_utils.to_categorical(Y_train,NB_CLASSES)
Y_test = np_utils.to_categorical(y_test,NB_CLASSES)

#float and normalization
X_train = X_train.astype('float32')
X_test = X_test.astype('float32')
X_train /= 255
X_test /= 255

#network
model = Sequential()
model.add(Conv2D(32 , (3, 3), padding='same',
input_shape=(IMG_ROWS, IMG_COLS, IMG_CHANNELS)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(512))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(NB_CLASSES))
model.add(Activation('softmax'))
model.summary()

#train
model.compile(loss='categorical_crossentropy', optimizer=OPTIM, 
metrics=['accuracy'])
model.fit(X_train, Y_train, batch_size=BATCH_SIZE, 
epochs=NB_EPOCH, validation_split=VALIDATION_SPLIT, 
verbose=VERBOSE)
score=model.evaluate(X_test, Y_test,
batch_size=BATCH_SIZE,verbose=VERBOSE)
print("test score:",score[0])
print('test accuracy:',score[1])

model.summary()

import matplotlib.pyplot as plt
import matplotlib.image as img

from google.colab import files
uploaded = files.upload()
my_image = plt.imread("horse.jpg")

img = plt.imshow(my_image)

from skimage.transform import resize
my_image_resized = resize(my_image,(32,32,3))
img = plt.imshow(my_image_resized)

import numpy as np
probabilities = model.predict( np.array( [my_image_resized] ) )

probabilities

number_to_class =['airplane','automobile','bird','cat','deer','dog','frog','horse','ship','truck']
index = np.argsort(probabilities[0,:])
print('most likely class:',number_to_class[index[4]], '--probability:', probabilities[0, index[4]])
print('second most likely class:',number_to_class[index[8]], '--probability:', probabilities[0, index[8]])
print('third most likely class:',number_to_class[index[7]], '--probability:', probabilities[0, index[7]])
print('fourth most likely class:',number_to_class[index[6]], '--probability:', probabilities[0, index[6]])
print('fifth most likely class:',number_to_class[index[9]], '--probability:', probabilities[0, index[9]])